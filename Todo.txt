Todo:

✔️ reorder packages
✔️ logging in services(log.info)
✔️ @Operation, @ApiResponses in controllers (for Swagger)

✔️ validation in models (@NotNull/@NotEmpty/@NotBlank, @Min/Max, ..., @Valid)
✔️ exception handler (*validation factory)

✔️ Multi-module project:
    -api (presentation layer - vzaimodeistvie s usera chrez modelite - input/output models)  [2]
    -core (service layer - business logic)  [3]
    -persistence (repository layer - database)  [4]
    -domain - (1 empty class for now)  [4]
    -rest (controllers, main)  [1]
      * fix dependencies : rest -> core -> api -> persistence -> domain
      * ${revision : da izkaram <version>0.0.1-SNAPSHOT</version> da e navsqkude edna versiq
      * moved <build> from main pom.xml to rest pom.xml
      ** Maven -> hotel -> package -> Run Maven Build
      ** mvn clean install -U

✔️ no hardcoded version in child poms, all versions should be in the main pom should in the properties
✔️ flatten -> maven package

✔️ custom validation like @Min/@Max - for example: RoomNumberValidator
   - POST system/room ✔
   - PUT system/room/{roomId} ✔
   - PATCH system/room/{roomId} ✔

------------------------------------------------------------------------------------------

✔️ replacement of request mapping routes - @GetMapping(RestApiRoutes.GET_ROOM_INFO)

✔️ reorder dependencies in poms

✔️ add flattenpoms in .gitignore
    **/*.flattened-pom.xml
    git rm --cached **/*.flattened-pom.xml


✔️ <groupId>com.tinqinacademy.hotel</groupId>

✔️ dependency for postgre in persistence pom
✔️ application.properties connection docker postgre

------------------------------------------------------------------------------------------

✔️ create sql tables - "db_scheme.txt"

- - - - - - - - - - - - - - - - - - - - - - - - - - -

✔️ All crud operations for all tables
    ✔ add data seeding when starting app (one time) [+ add logger everywhere]
    ✔ endpoint for clearing all tables

✔️ Implement some of the endpoints from the discord image table (?use input/output models?)
    ✔ 2) Returns basic info for a room with the specified id

------------------------------------------------------------------------------------------

* use single quotes ' ' for the saved words in the queries
* """select...."""  instead of  "select.."+"..."

- JPA
    ✔️ JpaRepository
    ✔️ DataSeeder (not necessary adding ids when building)

- - - - - - - - - - - - - - - - - - - - - - - - - - -

- Implement all endpoints from discord image tables
    + new endpoint: updateBooking + good logic for it

- ConversionService - add converters (discord) for necessary models (and add logging to converters)

- Git:
  -ssh keys
  -gitignore (only source code)
  -branch with new feature -> pull request -> merge with main

 - Add logging to everything in business logic
