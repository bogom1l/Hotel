Todo: ✔️ ❌ ❓

✔️ reorder packages
✔️ logging in services(log.info)
✔️ @Operation, @ApiResponses in controllers (for Swagger)

✔️ validation in models (@NotNull/@NotEmpty/@NotBlank, @Min/Max, ..., @Valid)
✔️ exception handler (*validation factory)

✔️ Multi-module project:
    -api (presentation layer - vzaimodeistvie s usera chrez modelite - input/output models)  [2]
    -core (service layer - business logic)  [3]
    -persistence (repository layer - database)  [4]
    -domain - (1 empty class for now)  [4]
    -rest (controllers, main)  [1]
      * fix dependencies : rest -> core -> api -> persistence -> domain
      * ${revision : da izkaram <version>0.0.1-SNAPSHOT</version> da e navsqkude edna versiq
      * moved <build> from main pom.xml to rest pom.xml
      ** Maven -> hotel -> package -> Run Maven Build
      ** mvn clean install -U

✔️ no hardcoded version in child poms, all versions should be in the main pom should in the properties
✔️ flatten -> maven package

✔️ custom validation like @Min/@Max - for example: RoomNumberValidator
   - POST system/room ✔
   - PUT system/room/{roomId} ✔
   - PATCH system/room/{roomId} ✔

------------------------------------------------------------------------------------------

✔️ replacement of request mapping routes - @GetMapping(RestApiRoutes.GET_ROOM_INFO)

✔️ reorder dependencies in poms

✔️ add flattenpoms in .gitignore
    **/*.flattened-pom.xml
    git rm --cached **/*.flattened-pom.xml


✔️ <groupId>com.tinqinacademy.hotel</groupId>

✔️ dependency for postgre in persistence pom
✔️ application.properties connection docker postgre

------------------------------------------------------------------------------------------

✔️ create sql tables - "db_scheme.txt"

- - - - - - - - - - - - - - - - - - - - - - - - - - -

✔️ All crud operations for all tables
    ✔ add data seeding when starting app (one time) [+ add logger everywhere]
    ✔ endpoint for clearing all tables

✔️ Implement some of the endpoints from the discord image table (?use input/output models?)
    ✔ 2) Returns basic info for a room with the specified id

------------------------------------------------------------------------------------------

* use single quotes ' ' for the saved words in the queries
* """select...."""  instead of  "select.."+"..."

- JPA
    ✔️ JpaRepository
    ✔️ DataSeeder (not necessary adding ids when building)


✔️ Rename all 'visitor' in project to 'guest' (for easier understanding)

- - - - - - - - - - - - - - - - - - - - - - - - - - -

-  Implement all endpoints from discord image tables
    ✔️ make deleteAll for each table
    ✔️ [bonus] new endpoint: updateBooking + good logic for it
    ✔️ refactor endpoint: getReport - make the fields optional
    ✔️ make guest's idCardNumber unique (drop all db tables for refresh)
    ✔️ ConversionService (with Builder if necessary) (and logging)

- Git:
  ✔️ ssh key [home✔️; work?]
  ✔️ configure .gitignore - all but source code
  ✔️ (new issue?) -> new branch -> implement the feature in the branch -> pull request -> merge with main

  ✔️ review all code logic and add todos for future refactoring/implementing

-------------------------------------------------------------------------

✔️ Add vavr dependency

✔️ Implement operation processors class for each endpoint in the controllers
    - remove GlobalExceptionHandler
    - Monads - Vavr - Try, Either : Try.of() block -> .toEither.mapLeft(ErrorsWrapper)
    - abstract class BaseController - from Either to ResponseEntity
    - abstract class BaseOperationProcessor : conversionService, validator + validateInput(), ?errorHandler

    * remove @valid annotations from controllers input and validate them in the service layer (OperationProcessors)
    * remove @RequiredArgsConstructor from processors
    * GET requests: can validate @Size,... in the input models

✔️ unbookRoom -> AND REMOVE ALL GUESTS TO THIS BOOKING

✔️ clean up

❓ Add more custom exceptions? (and handle them in the ErrorHandler)   ||   use everywhere only HotelException?
❓ Refactor some of the processors' logic

-------------------------------------------------------------------------

✔️ throw custom ValidationException instead of ConstraintViolationException (in validateInput())
✔️ ternary operator in base controller
✔️ na 1 red outputa v controllerite v handle()
✔️ custom validation annotation for enums;add it in input models;remove if checks for enums in processors
✔️ @NotNull(message = "visitors cannot be null") private List<@Valid RegisterVisitorInput> visitors;
✔️ fix CheckAvailableRoomOperationProcessor: startDate and endDate - required; others - optional
✔️ refactor enum validators

-------------------------------------------------------------------------

❓ Integrate spring boot admin (?not in a new project)

❌ Feign - add Hotel and Comments in HotelBff
    * restexport module
    * mvn clean install -U
    -> In HotelBff make a configuration for the other microservices

❌ authentication's endpoints (discord image)

